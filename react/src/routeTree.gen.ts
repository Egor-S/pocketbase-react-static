/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AdminRouteRouteImport } from './routes/_admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSecretRouteImport } from './routes/_auth/secret'
import { Route as AdminTopsecretRouteImport } from './routes/_admin/topsecret'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSecretRoute = AuthSecretRouteImport.update({
  id: '/secret',
  path: '/secret',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AdminTopsecretRoute = AdminTopsecretRouteImport.update({
  id: '/topsecret',
  path: '/topsecret',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/topsecret': typeof AdminTopsecretRoute
  '/secret': typeof AuthSecretRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/topsecret': typeof AdminTopsecretRoute
  '/secret': typeof AuthSecretRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_admin/topsecret': typeof AdminTopsecretRoute
  '/_auth/secret': typeof AuthSecretRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/topsecret' | '/secret'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/topsecret' | '/secret'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_auth'
    | '/login'
    | '/_admin/topsecret'
    | '/_auth/secret'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/secret': {
      id: '/_auth/secret'
      path: '/secret'
      fullPath: '/secret'
      preLoaderRoute: typeof AuthSecretRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_admin/topsecret': {
      id: '/_admin/topsecret'
      path: '/topsecret'
      fullPath: '/topsecret'
      preLoaderRoute: typeof AdminTopsecretRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminTopsecretRoute: typeof AdminTopsecretRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminTopsecretRoute: AdminTopsecretRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthSecretRoute: typeof AuthSecretRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSecretRoute: AuthSecretRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
